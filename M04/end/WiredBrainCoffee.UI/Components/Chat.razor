@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Microsoft.AspNetCore.SignalR.Client
@inject Microsoft.Extensions.Configuration.IConfiguration config

<h2>Chat with us</h2>
<hr />

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>
<div class="form-group">
    <label for="name">Name: </label>
    <input class="form-control" @bind="nameInput" />
</div>
<div class="form-group">
    <label for="name">Message: </label>
    <textarea class="form-control" @bind="messageInput" size="50" />
</div>
<button @onclick="Send" class="btn btn-info" disabled="@(!IsConnected)">Send</button>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string nameInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        var url = config["host"];

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"{url}/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    void Send()
    {
        hubConnection.SendAsync("SendMessage", nameInput, messageInput);
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}